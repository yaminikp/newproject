<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
  Adapted from Google Checkstyle file at
    https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml
 -->

<module name="Checker">

    <!-- Check only UTF-8 encoded files -->
    <property name="charset" value="UTF-8"/>

    <!-- Check only .java, .properties, and .xml files -->
    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Spaces, not tabs -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- All files should end with a newline. -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- No blank lines preceding a closing brace. -->
    <module name="RegexpMultiline">
        <property name="format" value="^\s*\n\s*[}]"/>
        <property name="message" value="Remove trailing empty lines before close of block."/>
    </module>

    <module name="TreeWalker">

        <module name="OneTopLevelClass"/>

        <!-- The name of the class and the name of the file should match -->
        <module name="OuterTypeFilename"/>

        <!-- Use standard ASCII escape sequences where possible -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>

        <!-- Unicode escapes should only be used for non-printable and control characters -->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!-- Max line length is 100 chars, except for package and import statements, and URLs -->
        <module name="LineLength">
            <property name="max" value="100"/>
            <property name="ignorePattern"
                value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>

        <module name="Indentation">
            <property name="lineWrappingIndentation" value="8"/>
            <property name="throwsIndent" value="0"/>
        </module>

        <!-- Indent comments to surrounding code. -->
        <module name="CommentsIndentation"/>

        <!-- Don't use empty blocks when they would be meaningless -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>

        <!-- Allow an empty catch block when commented, or with `expected` as exception name. -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>

        <!-- Always use braces for constructs that don't fit on a single line -->
        <module name="NeedBraces">
            <property name="allowSingleLineStatement" value="true"/>
        </module>

        <!-- Require standard Java-style brace placement -->
        <module name="LeftCurly"/>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                value="METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT"/>
        </module>

        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyCatches" value="true"/>
        </module>

        <!-- Use standard spacing for generic types (e.g., don't do `foo< String >`) -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- No whitespace between method name and params (e.g., don't do `foo ()`) -->
        <module name="MethodParamPad"/>

        <!-- No whitespace inside parens (e.g., don't do `foo( 0, 3 )`) -->
        <module name="ParenPad"/>

        <module name="NoWhitespaceBefore">
            <property name="tokens"
                value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <module name="WhitespaceAfter"/>

        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>

        <!-- Use `String[] args`, not `String args[]` -->
        <module name="ArrayTypeStyle"/>

        <module name="MissingSwitchDefault"/>

        <!-- Don't have fall through switch cases without a "falls through" comment -->
        <module name="FallThrough"/>

        <!-- Use `100L` for longs, not `100l` -->
        <module name="UpperEll"/>

        <module name="ModifierOrder"/>

        <!-- Disallow more than one consecutive empty line everywhere -->
        <!-- The part of this check that requires empty lines is disabled; see suppression file. -->
        <module name="EmptyLineSeparator">
            <property name="id" value="GeneralEmptyLineSeparator"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>
        <module name="EmptyLineSeparator">
            <property name="id" value="PackageImportEmptyLineSeparator"/>
            <property name="tokens" value="PACKAGE_DEF, IMPORT"/>
            <property name="allowMultipleEmptyLines" value="false"/>
        </module>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapBreakBefore"/>
            <property name="option" value="nl"/>
            <property name="tokens" value="DOT, AT, METHOD_REF"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapBreakAfter"/>
            <property name="option" value="eol"/>
            <property name="tokens"
                value="COMMA, SEMI, ELLIPSIS, ARRAY_DECLARATOR, RBRACK"/>
        </module>
        <module name="OperatorWrap">
            <property name="id" value="OperatorWrapBefore"/>
            <property name="option" value="nl"/>
            <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LE, LITERAL_INSTANCEOF,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module name="OperatorWrap">
            <property name="id" value="OperatorWrapAfter"/>
            <property name="option" value="eol"/>
            <property name="tokens"
                value="ASSIGN"/>
        </module>

        <module name="AnnotationLocation">
            <property name="allowSamelineMultipleAnnotations" value="true"/>
            <property name="allowSamelineParameterizedAnnotation" value="true"/>
        </module>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
                value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <message key="name.invalidPattern"
                value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodName">
            <message key="name.invalidPattern"
                value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="ignoreOverridden" value="true"/>
            <message key="name.invalidPattern"
                value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="AbbreviationAsWordInName">
            <property name="allowedAbbreviationLength" value="2"/>
            <property name="ignoreFinal" value="false"/>
        </module>

        <!-- Don't wrap package and import statements -->
        <module name="NoLineWrap"/>

        <module name="AvoidStarImport"/>

        <module name="CustomImportOrder">
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
        </module>

        <!-- Group all overloads together -->
        <module name="OverloadMethodsDeclarationOrder"/>

        <module name="NoFinalizer"/>

        <!-- Max 3 lines distance between declaration of non-final variable and its first usage. -->
        <module name="VariableDeclarationUsageDistance"/>

        <!-- Follow Javadoc tags like `@param` with a description. -->
        <module name="NonEmptyAtclauseDescription"/>

        <!-- Indentation is 4 inside Javadocs. -->
        <module name="JavadocTagContinuationIndentation"/>

        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>

        <module name="JavadocParagraph"/>

        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingJavadoc" value="true"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>

        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/checkstyle_suppressions.xml"/>
    </module>
</module>
